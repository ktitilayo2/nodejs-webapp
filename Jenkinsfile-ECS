pipeline {
    agent any

    parameters {
    choice choices: ['apply', 'destroy'], description: 'Please enter your option or action', name: 'action'
     }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "eu-west-2"
    }
    stages {
        stage('Checkout') {
            steps {
           git branch: 'main', url: 'https://github.com/ooghenekaro/nodejs-webapp.git'
  
            }
        }
    
        stage ("terraform init") {
            steps {
                sh "terraform init" 
            }
        }
  
        stage ("plan") {
            steps {
                sh "terraform plan" 
            }
        }
        stage (" Action") {
            steps {
                sh 'terraform ${action} --auto-approve' 
           }
        }
    stages{
        // NPM dependencies
        stage('pull npm dependencies') {
            steps {
                sh 'npm install'
            }
        }
        // Run Unit test
        //stage('Run Unit Test') {
          //  steps {
               // sh 'npm test'
           // }
        //}
        // run sonarqube test
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            }
        }
        stage('build Docker Container') {
            steps {
                script {
                    // build image
                    docker.build("755537473478.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:v1")
                }
            }
        }
        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image --format template --output trivy_report.html 755537473478.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:v1'
            }
       }
        stage('Push to ECR') {
            steps {
                script{
                    //https://<AwsAccountNumber>.dkr.ecr.<region>.amazonaws.com/rekeyole-app', 'ecr:<region>:<credentialsId>
                    docker.withRegistry('https://755537473478.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:v1', 'ecr:us-east-1:kenAcrAws') {
                    // build image
                    def myImage = docker.build("755537473478.dkr.ecr.us-east-1.amazonaws.com/nodejsapp:v1")
                    // push image
                    myImage.push()
                    }
                }
            }
    }
}
   
    
